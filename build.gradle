plugins {
    id 'java'
    id 'maven-publish'
    id 'c'
    id 'application'
}


group 'net.devtech'
version '1.1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'
    testImplementation('junit:junit:4.12')
}

compileJava {
    options.compilerArgs += ["-h", file("src/native_/c")]
}

java {
    withSourcesJar()
}

//test {
//    systemProperty "java.library.path", file("${buildDir}/libs/native_/shared/x64").absolutePath
//}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            def mavenUrl = project.hasProperty('maven_url') ? project.property('maven_url') : ""
            url mavenUrl
            if (mavenUrl.startsWith("http")) {
                credentials {
                    username project.hasProperty('maven_username') ? project.property('maven_username') : ""
                    password project.hasProperty('maven_password') ? project.property('maven_password') : ""
                }
            }
        }
    }
}

model {
    toolChains {

        //if(file("/msys64/mingw32").exists()) {
        //    gcc32(Gcc) {
        //        path "C:/msys64/mingw32"
        //        target "x86"
        //    }
        //}

        if(file("/msys64/mingw64/bin").exists()) {
            gcc64(Gcc) {
                path "C:/msys64/mingw64"
                target "x86_64"
            }
        }
    }
}

model {
    platforms {
        //x86 {
        //    architecture "x86"
        //}
        x64 {
            architecture "x86_64"
        }
    }

    components {
        native_(NativeLibrarySpec) {
            //targetPlatform "x86"
            targetPlatform "x64"
            binaries.all {
                cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.9'
                    cCompiler.args '-stdlib=libc++'
                    linker.args '-stdlib=libc++'
                    linker.args '-mmacosx-version-min=10.9'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    //linker.args "Shlwapi.lib", "Advapi32.lib"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
                }
            }
        }
    }
}

tasks.configureEach() {
    println it.toString() + " " + it.outputs.files.files.toString()
}

test.dependsOn 'native_SharedLibrary'//, 'native_X86SharedLibrary'
